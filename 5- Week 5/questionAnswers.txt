1- Sum of Two Integers






class Solution {
    public int getSum(int a, int b) {
        while (b != 0) {
            int answer = a ^ b;
            int carry = (a & b) << 1;
            a = answer;
            b = carry;
        }
        
        return a;
    }
    
}



2- Number of 1 Bits






public class Solution {
    // you need to treat n as an unsigned value
    public int hammingWeight(int n) {
        int answ = 0;
        int mask = 1;
        
        for (int i = 0; i < 32; i++){
            if ((n&mask) != 0){
                answ++;
            }
            mask <<= 1;
        }
        return answ;
    }
}




3- Counting Bits







class Solution {
    public int[] countBits(int n) {
        int[] answ = new int[n + 1];
        for (int i = 0; i < n + 1; i++){
            answ[i] = helper(i);
        }
        return answ;
    }
    
    public int helper(int n){
        int mask = 1;
        int count = 0;
        while (n >= mask){
            if ((n&mask) != 0){
                count++;
            }
            mask <<= 1;
        }
        return count;
    }
}





4- Missing Number







class Solution {
    public int missingNumber(int[] nums) {
        int s = nums.length;
        
        for (int i = 0; i < nums.length; i++){
            s ^= i ^ nums[i];
        }
        
        return s;
    }
}



5- Reverse Bits






public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int pow = 31;
        int mask2 = 1;
        int res = 0;
        
        for (int i = 0; i < 32; i++){
            if ((mask2 & n) != 0){
                res = (1 << pow) | res;
            }
            pow--;
            mask2 <<= 1;
        }
        
        return res;
    }
    
}
