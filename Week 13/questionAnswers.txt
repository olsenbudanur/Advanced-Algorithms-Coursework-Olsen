1- Rotate Image





class Solution {
    public void rotate(int[][] matrix) {
        ArrayList<Integer> traverse = new ArrayList<>();
        
        
        for (int j = 0; j < matrix[0].length; j++){
            for (int i = matrix.length - 1; i >= 0 ; i--){
                traverse.add(matrix[i][j]);
            }
        }
        
        
        int idx = 0;
        for (int i = 0; i < matrix.length; i++){
            for (int j = 0; j < matrix[0].length; j++){
                matrix[i][j] = traverse.get(idx);
                idx++;
            }
        }
        
    }
}


2- Word Search







class Solution {
    boolean exists = false;
    public boolean exist(char[][] board, String word) {
        for (int i = 0; i < board.length; i++){
            for (int j = 0; j < board[0].length; j++){
                dfs(board, word, i, j, 0);
            }
        }
        
        return exists;
    }
    
    
    public void dfs(char[][] board, String word, int i, int j, int idx){
        // If we found the word.
        if (idx == word.length()) {
            exists = true;
            return;
        }
        //
        // If out of bounds, return.
        if(i >= board.length || i < 0 || j >= board[0].length || j < 0 || idx >= word.length()) return;
        //
        // If curr space is not what we are looking for, return.
        if (!(board[i][j] == word.charAt(idx))) return;

        board[i][j] = '#';
        
        dfs(board, word, i + 1, j, idx + 1);
        dfs(board, word, i, j + 1, idx + 1);
        
        dfs(board, word, i - 1, j, idx + 1);
        dfs(board, word, i, j - 1, idx + 1);
        board[i][j] = word.charAt(idx);
        
    }

    
    
    
    
}


3- Maximum Depth of Binary Tree






/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = 0;
    public int maxDepth(TreeNode root) {
        helper(1, root);
        return max;
    }
    
    public void helper(int level, TreeNode curr){
        if (curr == null) return;
        helper(level + 1, curr.left);
        helper(level + 1, curr.right);
        max = Math.max(max, level);
    }
}





4- Same Tree






/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    boolean answ = true;
    public boolean isSameTree(TreeNode p, TreeNode q) {
        helper(p, q);
        return answ;
    }
    
    public void helper(TreeNode p, TreeNode q){
        if (p == null && q == null) return;
        else if (p == null || q == null) answ = false;
        else if (p.val != q.val) answ = false;
        else {
            helper(p.left, q.left);
            helper(p.right, q.right);
        }
    }
    
}






5- Invert/Flip Binary Tree






/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        helper(root);
        return root;
    }
    public void helper(TreeNode node){
        if (node == null) return;
        TreeNode temp = node.right;
        node.right = node.left;
        node.left = temp;
        helper(node.right);
        helper(node.left);
    }
}



