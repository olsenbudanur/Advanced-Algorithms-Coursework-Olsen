1- House Robber



class Solution {
    public int rob(int[] nums) {
        if (nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0], nums[1]);
        
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        
        for (int i = 2; i < nums.length; i++){
            int curr = nums[i];
            int maxTillNow = Math.max(dp[i-1], curr + dp[i-2]);
            dp[i] = maxTillNow;
        }
        
        return dp[dp.length - 1];
        
        
        // or
        
//         int rob1 = 0, rob2 = 0;
        
//         for (int num : nums){
//             int temp = Math.max(rob1 + num, rob2);
//             rob1 = rob2;
//             rob2 = temp;
//         }
//         return rob2;
    }
    
    
    
    
}



2- House Robber II






class Solution {
    public int rob(int[] nums) {
        if (nums.length == 1) return nums[0];
        int one = helper(Arrays.copyOfRange(nums, 0, nums.length - 1));
        int two = helper(Arrays.copyOfRange(nums, 1, nums.length));
        
        return Math.max(one, two);
    }
    
    
    public int helper(int[] nums){
        if (nums.length == 0) return 0;
        if (nums.length == 1) return nums[0];
        if (nums.length == 2) return Math.max(nums[0], nums[1]);
        
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        dp[1] = Math.max(nums[0], nums[1]);
        
        for (int i = 2; i < nums.length; i++){
            dp[i] = Math.max(nums[i] + dp[i-2], dp[i - 1]);
        }
        
        return dp[nums.length - 1];
    }
}
    





3- Decode Ways







class Solution {
    public int numDecodings(String s) {
        int[] dp = new int[s.length() + 1];
        dp[0] = 1;
        dp[1] = s.charAt(0) == '0' ? 0 : 1;
        
        for (int i = 2; i < dp.length; i++){
            // Check if successful single digit decode is possible.
            if (s.charAt(i - 1) != '0') {
               dp[i] = dp[i - 1];  
            }
            
            // Check if successful two digit decode is possible.
            int twoDigit = Integer.valueOf(s.substring(i - 2, i));
            if (twoDigit >= 10 && twoDigit <= 26) {
                dp[i] += dp[i - 2];
            }
        }
        
        return dp[s.length()];
        
    }
    
}





4- Unique Paths






class Solution {
    
    public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        for (int i = 0; i < m; i++){
            dp[i][0] = 1;
        }
        for (int i = 0; i < n; i++){
            dp[0][i] = 1;
        }
        
        for (int i = 1; i < m; i++){
            for (int j = 1; j < n; j++){
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        
        
        return dp[m - 1][n - 1];
    }
    
    
}




5- Jump Game






public class Solution {
    public boolean canJump(int[] nums) {
        int reach = 0;
        
        for (int i = 0; i < nums.length; i++){
            //
            // if we are at a point out of our reach
            // return false...
            if (i > reach) return false;
            reach = Math.max(reach, nums[i] + i);
        }
        
        return true;
        
    }
}

